set(CPP_META_PARSER_TARGET_NAME CppMateParser)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

file(GLOB_RECURSE CPP_META_PARSER_HEADERS "*.h")
file(GLOB_RECURSE CPP_META_PARSER_SOURCES "*.cpp")

source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES ${CPP_META_PARSER_HEADERS} ${CPP_META_PARSER_SOURCES})

set(LLVM_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/LLVM/include ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/mustache ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CPP_META_PARSER_BIN})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CPP_META_PARSER_BIN})

add_executable(${CPP_META_PARSER_TARGET_NAME} ${CPP_META_PARSER_HEADERS} ${CPP_META_PARSER_SOURCES})
target_include_directories(${CPP_META_PARSER_TARGET_NAME}
        PRIVATE ${LLVM_INCLUDE_DIRS}
        PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Parser
)

if (CMAKE_HOST_WIN32)
    set(LLVM_LIBRARY_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/LLVM/lib/x86)
    set(LLVM_SHARED_LIBRARY_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/LLVM/bin/x86)
    set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} /O2 /Ob2")
    target_link_libraries(${CPP_META_PARSER_TARGET_NAME}  ${LLVM_LIBRARY_DIR}/libclang.lib)
elseif(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Linux")
    set(LLVM_LIBRARY_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/LLVM/lib/Linux)
    set(LLVM_SHARED_LIBRARY_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/LLVM/bin/Linux)
    set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O3")
    target_link_libraries(${CPP_META_PARSER_TARGET_NAME}  ${LLVM_SHARED_LIBRARY_DIR}/libclang.so.12)
endif()

add_definitions(-DTIXML_USE_STL)

add_custom_command(TARGET ${CPP_META_PARSER_TARGET_NAME} POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_directory
		"${LLVM_SHARED_LIBRARY_DIR}"
		$<TARGET_FILE_DIR:${CPP_META_PARSER_TARGET_NAME}>
)

include(cmake/precompile.cmake)
